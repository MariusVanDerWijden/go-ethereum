// Code generated by rlpgen. DO NOT EDIT.

package types

import "github.com/ethereum/go-ethereum/common"
import "github.com/ethereum/go-ethereum/rlp"
import "io"

func (obj *DynamicFeeTx) EncodeRLP(_w io.Writer) error {
	w := rlp.NewEncoderBuffer(_w)
	_tmp0 := w.List()
	if obj.ChainID == nil {
		w.Write(rlp.EmptyString)
	} else {
		if obj.ChainID.Sign() == -1 {
			return rlp.ErrNegativeBigInt
		}
		w.WriteBigInt(obj.ChainID)
	}
	w.WriteUint64(obj.Nonce)
	if obj.GasTipCap == nil {
		w.Write(rlp.EmptyString)
	} else {
		if obj.GasTipCap.Sign() == -1 {
			return rlp.ErrNegativeBigInt
		}
		w.WriteBigInt(obj.GasTipCap)
	}
	if obj.GasFeeCap == nil {
		w.Write(rlp.EmptyString)
	} else {
		if obj.GasFeeCap.Sign() == -1 {
			return rlp.ErrNegativeBigInt
		}
		w.WriteBigInt(obj.GasFeeCap)
	}
	w.WriteUint64(obj.Gas)
	if obj.To == nil {
		w.Write([]byte{0x80})
	} else {
		w.WriteBytes(obj.To[:])
	}
	if obj.Value == nil {
		w.Write(rlp.EmptyString)
	} else {
		if obj.Value.Sign() == -1 {
			return rlp.ErrNegativeBigInt
		}
		w.WriteBigInt(obj.Value)
	}
	w.WriteBytes(obj.Data)
	_tmp1 := w.List()
	for _, _tmp2 := range obj.AccessList {
		_tmp3 := w.List()
		w.WriteBytes(_tmp2.Address[:])
		_tmp4 := w.List()
		for _, _tmp5 := range _tmp2.StorageKeys {
			w.WriteBytes(_tmp5[:])
		}
		w.ListEnd(_tmp4)
		w.ListEnd(_tmp3)
	}
	w.ListEnd(_tmp1)
	if obj.V == nil {
		w.Write(rlp.EmptyString)
	} else {
		if obj.V.Sign() == -1 {
			return rlp.ErrNegativeBigInt
		}
		w.WriteBigInt(obj.V)
	}
	if obj.R == nil {
		w.Write(rlp.EmptyString)
	} else {
		if obj.R.Sign() == -1 {
			return rlp.ErrNegativeBigInt
		}
		w.WriteBigInt(obj.R)
	}
	if obj.S == nil {
		w.Write(rlp.EmptyString)
	} else {
		if obj.S.Sign() == -1 {
			return rlp.ErrNegativeBigInt
		}
		w.WriteBigInt(obj.S)
	}
	w.ListEnd(_tmp0)
	return w.Flush()
}

func (obj *DynamicFeeTx) DecodeRLP(dec *rlp.Stream) error {
	var _tmp0 DynamicFeeTx
	{
		if _, err := dec.List(); err != nil {
			return err
		}
		// ChainID:
		_tmp1, err := dec.BigInt()
		if err != nil {
			return err
		}
		_tmp0.ChainID = _tmp1
		// Nonce:
		_tmp2, err := dec.Uint64()
		if err != nil {
			return err
		}
		_tmp0.Nonce = _tmp2
		// GasTipCap:
		_tmp3, err := dec.BigInt()
		if err != nil {
			return err
		}
		_tmp0.GasTipCap = _tmp3
		// GasFeeCap:
		_tmp4, err := dec.BigInt()
		if err != nil {
			return err
		}
		_tmp0.GasFeeCap = _tmp4
		// Gas:
		_tmp5, err := dec.Uint64()
		if err != nil {
			return err
		}
		_tmp0.Gas = _tmp5
		// To:
		var _tmp7 *common.Address
		if _tmp8, _tmp9, err := dec.Kind(); err != nil {
			return err
		} else if _tmp9 != 0 || _tmp8 != rlp.String {
			var _tmp6 common.Address
			if err := dec.ReadBytes(_tmp6[:]); err != nil {
				return err
			}
			_tmp7 = &_tmp6
		}
		_tmp0.To = _tmp7
		// Value:
		_tmp10, err := dec.BigInt()
		if err != nil {
			return err
		}
		_tmp0.Value = _tmp10
		// Data:
		_tmp11, err := dec.Bytes()
		if err != nil {
			return err
		}
		_tmp0.Data = _tmp11
		// AccessList:
		var _tmp12 []AccessTuple
		if _, err := dec.List(); err != nil {
			return err
		}
		for dec.MoreDataInList() {
			var _tmp13 AccessTuple
			{
				if _, err := dec.List(); err != nil {
					return err
				}
				// Address:
				var _tmp14 common.Address
				if err := dec.ReadBytes(_tmp14[:]); err != nil {
					return err
				}
				_tmp13.Address = _tmp14
				// StorageKeys:
				var _tmp15 []common.Hash
				if _, err := dec.List(); err != nil {
					return err
				}
				for dec.MoreDataInList() {
					var _tmp16 common.Hash
					if err := dec.ReadBytes(_tmp16[:]); err != nil {
						return err
					}
					_tmp15 = append(_tmp15, _tmp16)
				}
				if err := dec.ListEnd(); err != nil {
					return err
				}
				_tmp13.StorageKeys = _tmp15
				if err := dec.ListEnd(); err != nil {
					return err
				}
			}
			_tmp12 = append(_tmp12, _tmp13)
		}
		if err := dec.ListEnd(); err != nil {
			return err
		}
		_tmp0.AccessList = _tmp12
		// V:
		_tmp17, err := dec.BigInt()
		if err != nil {
			return err
		}
		_tmp0.V = _tmp17
		// R:
		_tmp18, err := dec.BigInt()
		if err != nil {
			return err
		}
		_tmp0.R = _tmp18
		// S:
		_tmp19, err := dec.BigInt()
		if err != nil {
			return err
		}
		_tmp0.S = _tmp19
		if err := dec.ListEnd(); err != nil {
			return err
		}
	}
	*obj = _tmp0
	return nil
}
