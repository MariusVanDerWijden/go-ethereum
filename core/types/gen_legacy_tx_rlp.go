// Code generated by rlpgen. DO NOT EDIT.

package types

import "github.com/ethereum/go-ethereum/common"
import "github.com/ethereum/go-ethereum/rlp"
import "io"

func (obj *LegacyTx) EncodeRLP(_w io.Writer) error {
	w := rlp.NewEncoderBuffer(_w)
	_tmp0 := w.List()
	w.WriteUint64(obj.Nonce)
	if obj.GasPrice == nil {
		w.Write(rlp.EmptyString)
	} else {
		if obj.GasPrice.Sign() == -1 {
			return rlp.ErrNegativeBigInt
		}
		w.WriteBigInt(obj.GasPrice)
	}
	w.WriteUint64(obj.Gas)
	if obj.To == nil {
		w.Write([]byte{0x80})
	} else {
		w.WriteBytes(obj.To[:])
	}
	if obj.Value == nil {
		w.Write(rlp.EmptyString)
	} else {
		if obj.Value.Sign() == -1 {
			return rlp.ErrNegativeBigInt
		}
		w.WriteBigInt(obj.Value)
	}
	w.WriteBytes(obj.Data)
	if obj.V == nil {
		w.Write(rlp.EmptyString)
	} else {
		if obj.V.Sign() == -1 {
			return rlp.ErrNegativeBigInt
		}
		w.WriteBigInt(obj.V)
	}
	if obj.R == nil {
		w.Write(rlp.EmptyString)
	} else {
		if obj.R.Sign() == -1 {
			return rlp.ErrNegativeBigInt
		}
		w.WriteBigInt(obj.R)
	}
	if obj.S == nil {
		w.Write(rlp.EmptyString)
	} else {
		if obj.S.Sign() == -1 {
			return rlp.ErrNegativeBigInt
		}
		w.WriteBigInt(obj.S)
	}
	w.ListEnd(_tmp0)
	return w.Flush()
}

func (obj *LegacyTx) DecodeRLP(dec *rlp.Stream) error {
	var _tmp0 LegacyTx
	{
		if _, err := dec.List(); err != nil {
			return err
		}
		// Nonce:
		_tmp1, err := dec.Uint64()
		if err != nil {
			return err
		}
		_tmp0.Nonce = _tmp1
		// GasPrice:
		_tmp2, err := dec.BigInt()
		if err != nil {
			return err
		}
		_tmp0.GasPrice = _tmp2
		// Gas:
		_tmp3, err := dec.Uint64()
		if err != nil {
			return err
		}
		_tmp0.Gas = _tmp3
		// To:
		var _tmp5 *common.Address
		if _tmp6, _tmp7, err := dec.Kind(); err != nil {
			return err
		} else if _tmp7 != 0 || _tmp6 != rlp.String {
			var _tmp4 common.Address
			if err := dec.ReadBytes(_tmp4[:]); err != nil {
				return err
			}
			_tmp5 = &_tmp4
		}
		_tmp0.To = _tmp5
		// Value:
		_tmp8, err := dec.BigInt()
		if err != nil {
			return err
		}
		_tmp0.Value = _tmp8
		// Data:
		_tmp9, err := dec.Bytes()
		if err != nil {
			return err
		}
		_tmp0.Data = _tmp9
		// V:
		_tmp10, err := dec.BigInt()
		if err != nil {
			return err
		}
		_tmp0.V = _tmp10
		// R:
		_tmp11, err := dec.BigInt()
		if err != nil {
			return err
		}
		_tmp0.R = _tmp11
		// S:
		_tmp12, err := dec.BigInt()
		if err != nil {
			return err
		}
		_tmp0.S = _tmp12
		if err := dec.ListEnd(); err != nil {
			return err
		}
	}
	*obj = _tmp0
	return nil
}
