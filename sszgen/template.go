// Copyright 2023 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package main

import (
	"bytes"
	"html/template"
)

var tmpl = `
// Code generated by sszgen- DO NOT EDIT.

package {{.Package}}

import (
	ssz "github.com/ethereum/go-ethereum/sszgen"
)

{{ range .Objects }}
		{{ .EncodeSSZ }}
		{{ .DecodeSSZ }}
{{ end }}
`

var encodeTmpl = `
// EncodeSSZ encodes the {{ .Name }} object as ssz
func (o *{{ .Name }}) EncodeSSZ() ([]byte, error) {
	var (
		err error
		enc []byte
		buf = make([]byte, {{ .FixedFieldLength }})
	)
{{ range $i, $t := .FixedFields }}
	copy(buf[{{ $t.Offset }}:], sszgen.EncodeBasic(o.{{ $t.Name }})) {{ end }}
{{ range $i, $t := .VariableFields }}
	enc, err = o.{{ $t.Name }}.EncodeSSZ()
	if err != nil {
		return nil, err
	}
	copy(buf[{{ $t.Offset }}:], sszgen.EncodeBasic(len(enc))])
	buf = append(buf, enc)
{{ end }}
	return buf, nil
}
`

type data struct {
	Package string
	Objects map[string]sszObj
}

func (d *data) Encode() string {
	tmpl, err := template.New("tmpl").Parse(tmpl)
	if err != nil {
		panic(err)
	}
	buf := new(bytes.Buffer)
	if err = tmpl.Execute(buf, d); err != nil {
		panic(err)
	}
	return buf.String()
}

type sszObj struct {
	EncodeSSZ string
	DecodeSSZ string
}

func newSSZObj(obj Object) sszObj {
	return sszObj{
		EncodeSSZ: obj.Encode(),
	}
}
